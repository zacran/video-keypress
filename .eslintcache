[{"/Users/zcranfill/Test/video-keypress/src/index.js":"1","/Users/zcranfill/Test/video-keypress/src/App.js":"2","/Users/zcranfill/Test/video-keypress/src/components/Chart.js":"3","/Users/zcranfill/Test/video-keypress/src/hooks/keybindMap.js":"4"},{"size":145,"mtime":1610635256431,"results":"5","hashOfConfig":"6"},{"size":24624,"mtime":1611116759391,"results":"7","hashOfConfig":"6"},{"size":12363,"mtime":1611282507114,"results":"8","hashOfConfig":"6"},{"size":458,"mtime":1610830502322,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5od0xb",{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/zcranfill/Test/video-keypress/src/index.js",[],["20","21"],"/Users/zcranfill/Test/video-keypress/src/App.js",["22","23","24","25","26"],"import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport 'fontsource-roboto';\nimport packageJson from '../package.json';\nimport { withStyles } from '@material-ui/core/styles';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Chart from \"./components/Chart\"\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ReactPlayer from \"react-player\";\nimport useEventListener from \"@use-it/event-listener\";\nimport KeybindMap from \"./hooks/keybindMap\"\nimport ImageIcon from '@material-ui/icons/Image';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport MovieIcon from '@material-ui/icons/Movie';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport KeyboardIcon from '@material-ui/icons/Keyboard';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst SPACE_KEYS = ['32', ' '];\n\nconst useStyles = makeStyles((theme) => ({\n    content: {\n        marginTop: '55px'\n    },\n    reactPlayer: {\n        margin: 'auto'\n    },\n    popoverMenu: {\n        width: '200px'\n    },\n    slider: {\n        margin: '0px 20px',\n        width: '80%'\n    },\n    dataText: {\n        height: '420px',\n        width: '840px',\n        overflow: 'scroll',\n        margin: 'auto',\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: theme.shape.borderRadius,\n    },\n    button: {\n        padding: 0,\n    },\n    smallButton: {\n        marginTop: -4,\n        padding: 4,\n        '& svg': {\n            fontSize: 18\n        }\n    },\n    largeButton: {\n        display: 'block',\n        margin: 'auto',\n        '& svg': {\n            fontSize: 144,\n            color: \"#469FAE\"\n        }\n    },\n    toolbar: {\n        minHeight: 48,\n        maxHeight: 48,\n    },\n    restrictedText: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        margin: '0px 10px',\n        maxWidth: '300px'\n    },\n    title: {\n        flexGrow: 1,\n    },\n    bottomAppBar: {\n        top: 'auto',\n        bottom: 0,\n    },\n    bottomToolbar: {\n        margin: 'auto',\n        minWidth: '700px',\n        textAlign: 'center',\n        minHeight: 32,\n        maxHeight: 32,\n    },\n    menu: {\n        width: 'fit-content',\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: theme.shape.borderRadius,\n        '& svg': {\n            margin: theme.spacing(1.5),\n        },\n        '& hr': {\n            margin: theme.spacing(0, 0.5),\n        },\n    },\n}));\n\nconst StyledMenu = withStyles({\n    paper: {\n        border: '1px solid #d3d4d5',\n        width: '200px',\n        margin: '0px 10px',\n    }\n})((props) => (\n    <Menu\n        elevation={0}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n        }}\n        transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n        }}\n        {...props}\n    />\n));\n\nconst StyledMenuItem = withStyles((theme) => ({\n    root: {\n        '&:focus': {\n            backgroundColor: theme.palette.primary.main,\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\n                color: theme.palette.common.white,\n            },\n        },\n    },\n}))(MenuItem);\n\nconst App = () => {\n    var isPlayingBuffer = false;\n    const [state, setState] = useState({\n        dataFileName: '',\n        isVideo: false,\n        isPlaying: false,\n        duration: 0,\n        playedSeconds: 0,\n        loadedSeconds: 0,\n        playbackRate: 1,\n        keybinds: KeybindMap.Keybinds,\n        data: {\n            metadata: {},\n            events: []\n        }, // persisted data records\n        activeRecords: [], // activity record between keypress down and keypress up\n        derivedFields: []\n    });\n\n    const confirmVideoReset = () => {\n        return window.confirm(\"Are you sure you wish to reset the existing video? Unsaved data will be lost.\");\n    };\n\n    const resetData = () => {\n        hiddenVideoUpload.current.value = \"\";\n        setState({\n            ...state,\n            dataFileName: '',\n            isVideo: false,\n            isPlaying: false,\n            data: {\n                metadata: {},\n                events: []\n            }\n        });\n    };\n\n    function resetVideo() {\n        if (confirmVideoReset()) {\n            resetData();\n        }\n    };\n\n    const handleDuration = (duration) => {\n        setState({ ...state, duration: duration });\n    };\n\n    const handleProgress = (progress) => {\n        setState({ ...state, playedSeconds: progress.playedSeconds, loadedSeconds: progress.loadedSeconds });\n    };\n\n    const handleVideoSelect = (event) => {\n        if (state.dataFileName !== '') {\n            if (!confirmVideoReset()) {\n                return;\n            }\n        }\n        resetData();\n        hiddenVideoUpload.current.click();\n    };\n\n    const handleVideoUpload = (event) => {\n        var uploadedFile = event.target.files[0];\n        if (uploadedFile) {\n            var video = document.createElement('video');\n            var videoFilePath = URL.createObjectURL(uploadedFile);\n            video.src = videoFilePath;\n            video.addEventListener('loadedmetadata', function () {\n                var duration = parseFloat(video.duration.toFixed(2));\n                setState({\n                    ...state,\n                    videoFilePath: videoFilePath,\n                    dataFileName: event.target.files[0].name,\n                    isVideo: true,\n                    data: {\n                        metadata: {\n                            fileName: event.target.files[0].name,\n                            scoringDate: Date.now(),\n                            scoringDateText: new Date().toISOString(),\n                            duration: duration\n                        },\n                        events: []\n                    }\n                });\n                document.activeElement.blur();\n            });\n        }\n    };\n\n    const handleDataSelect = () => {\n        if (state.dataFileName !== '') {\n            if (!confirmVideoReset()) {\n                return;\n            }\n        }\n        resetData();\n        hiddenDataUpload.current.click();\n    };\n\n    const handleDataUpload = (event) => {\n        const fileReader = new FileReader();\n        fileReader.readAsText(event.target.files[0], \"UTF-8\");\n        var fileName = event.target.files[0].name;\n        fileReader.onload = event => {\n            // Validate data\n            var obj = JSON.parse(event.target.result);\n            if (obj.events && Array.isArray(obj.events) && obj.metadata && obj.metadata.fileName) {\n                console.log(\"Uploaded data passed validation\");\n                console.log(\"fileName\", fileName);\n                setState({ ...state, dataFileName: fileName, data: obj });\n            } else {\n                console.warn(\"Uploaded data not valid.\")\n            }\n        };\n    };\n\n    const handleDownloadData = () => {\n        if (state.data.events && state.data.events.length > 0) {\n            var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(state.data));\n            var downloadAnchorNode = document.createElement('a');\n            downloadAnchorNode.setAttribute(\"href\", dataStr);\n            downloadAnchorNode.setAttribute(\"download\", state.dataFileName + \"-scored-behavior.json\");\n            document.body.appendChild(downloadAnchorNode); // required for firefox\n            downloadAnchorNode.click();\n            downloadAnchorNode.remove();\n        }\n    };\n\n    const handleDownloadSVG = () => {\n        if (state.data.events && state.data.events.length > 0) {\n            var chartContainer = document.getElementById('chart-container');\n            var svgData = chartContainer.getElementsByTagName('svg')[0].outerHTML;\n            svgData = svgData.replace(\"<svg\", \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\");\n\n            var svgBlob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\n            var svgUrl = URL.createObjectURL(svgBlob);\n            var downloadLink = document.createElement(\"a\");\n            downloadLink.href = svgUrl;\n            downloadLink.download = state.dataFileName + \"-scored-behavior.svg\";\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n        }\n    };\n\n    const handleNavigateToGitHub = () => {\n        window.open('https://github.com/zacran/video-keypress', '_blank');\n    };\n\n    const handleIsPlayingUpdate = () => {\n        isPlayingBuffer = !isPlayingBuffer;\n    };\n\n    const handleOnStartPlay = () => {\n        setState({ ...state, isPlaying: true });\n    };\n\n    const handleOnPauseStop = () => {\n        setState({ ...state, isPlaying: false });\n    };\n\n    const handleKeydown = (event) => {\n        if (state.videoFilePath !== '' && state.isVideo && SPACE_KEYS.includes(String(event.key))) {\n            console.log(\"space \" + event.key, state);\n            event.preventDefault();\n            handleIsPlayingUpdate();\n        } else if (state.isPlaying) {\n            handleKeyevent(event.key, recordKeydown);\n        }\n    };\n\n    const handleKeyup = ({ key }) => {\n        handleKeyevent(key, recordKeyup);\n    };\n\n    const handleKeyevent = (key, callback) => {\n        console.log(\"press \" + key, state);\n        state.keybinds.forEach(function (keybind) {\n            if ((keybind.key === (String(key)) || keybind.code === (String(key)))) {\n                callback(keybind);\n            }\n        });\n    };\n\n    const getPlaybackRate = (value) => {\n        return `${value}x`;\n    };\n\n    const handlePlaybackRateChange = (event, value) => {\n        if (value !== state.playbackRate)\n            setState({ ...state, playbackRate: parseFloat(value) })\n    };\n\n    const recordKeydown = (keybind) => {\n        if (!keybind.active) {\n            keybind.active = true;\n            console.log(\"key down: \" + keybind.key + \" at \" + state.playedSeconds + \" secs\");\n\n            let activity = {\n                key: keybind.key,\n                behavior: keybind.behavior,\n                order: keybind.order,\n                start: state.playedSeconds\n            };\n\n            let activeRecords = state.activeRecords;\n            activeRecords.push(activity);\n            setState({ ...state, activeRecords: activeRecords });\n            console.log(\"recorded activity start: \", activity);\n            console.log(state.activeRecords);\n        }\n    };\n\n    const recordKeyup = (keybind) => {\n        let activity = state.activeRecords.find(obj => { return obj.key === keybind.key });\n        let activeRecords = state.activeRecords.filter(obj => obj.key !== keybind.key);\n\n        if (activity) {\n            keybind.active = false;\n            console.log(\"key up: \" + keybind.key + \" at \" + state.playedSeconds + \" secs\");\n\n            activity.id = state.data.events.length;\n            activity.end = state.playedSeconds;\n\n            console.log(\"recorded activity end: \", activity);\n            console.log(state.activeRecords);\n\n            let dataEvents = state.data.events;\n            dataEvents.push(activity);\n\n            setState({\n                ...state,\n                activeRecords: activeRecords,\n                data: {\n                    events: dataEvents,\n                    metadata: {\n                        ...state.data.metadata\n                    }\n                }\n            });\n            console.log(state.data);\n        }\n    };\n\n    useEventListener('keydown', handleKeydown);\n    useEventListener('keyup', handleKeyup);\n\n    const classes = useStyles();\n    const hiddenVideoUpload = useRef(null);\n    const hiddenDataUpload = useRef(null);\n\n    const [anchorKeybinds, setAnchorKeybinds] = useState(null);\n    const [anchorSettings, setAnchorSettings] = useState(null);\n\n    const handleKeybindMenuClick = (event) => {\n        setAnchorKeybinds(event.currentTarget);\n    };\n\n    const handleKeybindMenuClose = () => {\n        setAnchorKeybinds(null);\n    };\n\n    const handleSettingsClick = (event) => {\n        setAnchorSettings(event.currentTarget);\n    };\n\n    const handleSettingsClose = () => {\n        setAnchorSettings(null);\n    };\n\n\n    return (\n        <div className=\"App\">\n            <input type=\"file\" ref={hiddenVideoUpload} onChange={handleVideoUpload} style={{ display: 'none' }} />\n            <input type=\"file\" ref={hiddenDataUpload} onChange={handleDataUpload} style={{ display: 'none' }} />\n            <StyledMenu\n                className={classes.popoverMenu}\n                anchorEl={anchorSettings}\n                keepMounted\n                open={Boolean(anchorSettings)}\n                onClose={handleSettingsClose}>\n\n                <ListItemText id=\"playbackRate-slider\" primary=\"Playback Speed\" align=\"center\" />\n                <Slider\n                    key={`playbackRate-slider`}\n                    className={classes.slider}\n                    value={state.playbackRate || 1}\n                    getAriaValueText={getPlaybackRate}\n                    aria-labelledby=\"playbackRate-slider\"\n                    step={0.25}\n                    marks\n                    min={0.25}\n                    max={2}\n                    valueLabelDisplay=\"auto\"\n                    onChange={handlePlaybackRateChange}\n                />\n\n            </StyledMenu>\n            <StyledMenu\n                className={classes.popoverMenu}\n                anchorEl={anchorKeybinds}\n                keepMounted\n                open={Boolean(anchorKeybinds)}\n                onClose={handleKeybindMenuClose}>\n                <StyledMenuItem>\n                    {state.isPlaying === false && state.playedSeconds === 0 && (\n                        <ListItemText primary=\"Start\" secondary=\"space\" align=\"center\" />\n                    )}\n                    {state.isPlaying === true && (\n                        <ListItemText primary=\"Pause\" secondary=\"space\" align=\"center\" />\n                    )}\n                    {state.isPlaying === false && state.playedSeconds > 0 && (\n                        <ListItemText primary=\"Resume\" secondary=\"space\" align=\"center\" />\n                    )}\n                </StyledMenuItem>\n                {state.keybinds.map((keybind) =>\n                    <StyledMenuItem key={keybind.key}>\n                        <ListItemText primary={keybind.behavior} secondary={keybind.key} align=\"center\" />\n                    </StyledMenuItem>\n                )}\n                {/* <StyledMenuItem>\n                    <ListItemIcon>\n                        <AddCircleIcon fontSize=\"small\" />\n                    </ListItemIcon>\n                    <ListItemText secondary=\"Add Keybind\" align=\"center\" />\n                </StyledMenuItem> */}\n            </StyledMenu>\n            <AppBar position=\"fixed\" style={{ background: '#469FAE' }}>\n                <Toolbar className={classes.toolbar}>\n                    <Typography variant=\"h5\" component=\"h1\" className={classes.title}>Video Keypress</Typography>\n                    <Grid container alignItems=\"center\" className={classes.menu}>\n                        {state.dataFileName && (\n                            <Tooltip title={state.dataFileName}>\n                                <Grid item>\n                                    <Typography variant=\"caption\" display=\"block\" className={classes.restrictedText}>Current {state.isVideo ? \"Video\" : \"Data\"}:</Typography>\n                                    <Typography variant=\"overline\" display=\"block\" className={classes.restrictedText}>{state.dataFileName}</Typography>\n                                </Grid>\n                            </Tooltip>\n\n                        )}\n                        {state.dataFileName && (\n                            <Divider orientation=\"vertical\" flexItem />\n                        )}\n                        {state.dataFileName && (\n                            <Tooltip title=\"Download Data\">\n                                <IconButton aria-label=\"download data\"\n                                    color=\"inherit\"\n                                    className={classes.button}\n                                    onClick={handleDownloadData}>\n                                    <GetAppIcon />\n                                </IconButton>\n                            </Tooltip>\n                        )}\n                        {state.dataFileName && (\n                            <Divider orientation=\"vertical\" flexItem />\n                        )}\n                        {state.dataFileName && (\n                            <Tooltip title=\"Download SVG\">\n                                <IconButton aria-label=\"download svg\"\n                                    color=\"inherit\"\n                                    className={classes.button}\n                                    onClick={handleDownloadSVG}>\n                                    <ImageIcon />\n                                </IconButton>\n                            </Tooltip>\n                        )}\n                        {state.dataFileName && (\n                            <Divider orientation=\"vertical\" flexItem />\n                        )}\n                        {state.dataFileName && (\n                            <Tooltip title=\"Unset Video\">\n                                <IconButton aria-label=\"unset video\"\n                                    color=\"inherit\"\n                                    className={classes.button}\n                                    onClick={resetVideo}>\n                                    <CancelIcon />\n                                </IconButton>\n                            </Tooltip>\n                        )}\n                        {state.dataFileName && (\n                            <Divider orientation=\"vertical\" flexItem />\n                        )}\n                        <Tooltip title=\"Upload Data\">\n                            <IconButton aria-label=\"upload data\"\n                                color=\"inherit\"\n                                className={classes.button}\n                                onClick={handleDataSelect}>\n                                <PublishIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Select Video\">\n                            <IconButton aria-label=\"select video\" color=\"inherit\" className={classes.button} onClick={(e) => handleVideoSelect(e)}>\n                                <MovieIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Keybinds\">\n                            <IconButton aria-label=\"keybinds\"\n                                color=\"inherit\"\n                                aria-haspopup=\"true\"\n                                onClick={handleKeybindMenuClick}\n                                className={classes.button}>\n                                <KeyboardIcon />\n                            </IconButton>\n                        </Tooltip>\n                        {/* <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Data\">\n                            <IconButton aria-label=\"data\" color=\"inherit\" className={classes.button}>\n                                <FolderIcon />\n                            </IconButton>\n                        </Tooltip> */}\n                        <Divider orientation=\"vertical\" flexItem />\n                        <Tooltip title=\"Settings\">\n                            <IconButton aria-label=\"settings\"\n                                color=\"inherit\"\n                                aria-haspopup=\"true\"\n                                onClick={handleSettingsClick}\n                                className={classes.button}>\n                                <SettingsIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n            <div className={classes.content}>\n                {!state.dataFileName && (\n                    <div>\n                        <Typography variant=\"button\" display=\"block\" align=\"center\" gutterBottom>No video selected</Typography>\n                        <Tooltip title=\"Select Video\">\n                            <IconButton aria-label=\"select video\" color=\"inherit\" className={classes.largeButton} onClick={(e) => handleVideoSelect(e)}>\n                                <MovieIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                )}\n\n                <div className=\"Row\">\n                    <div className=\"VideoPlay\">\n                        {state.dataFileName && !state.isVideo && (\n                            <div className={classes.dataText}><pre>{JSON.stringify(state.data, undefined, 2)}</pre></div>\n\n                        )}\n                        {state.dataFileName && state.isVideo && (\n                            <ReactPlayer url={state.videoFilePath}\n                                className={classes.reactPlayer}\n                                playing={isPlayingBuffer}\n                                width=\"840px\"\n                                height=\"100%\"\n                                controls={true}\n                                onDuration={handleDuration}\n                                onProgress={handleProgress}\n                                playbackRate={state.playbackRate || 1}\n                                onPause={handleOnPauseStop}\n                                onStart={handleOnStartPlay}\n                                onPlay={handleOnStartPlay}\n                            />\n                        )}\n                        <div className=\"Row\">\n                            <Chart state={state} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <AppBar position=\"fixed\" color=\"transparent\" className={classes.bottomAppBar}>\n                <Toolbar className={classes.bottomToolbar}>\n                    <Grid container alignItems=\"center\" spacing={2}>\n                        <Grid item xs={6}>\n                            <Typography variant=\"caption\" align=\"center\" gutterBottom>\n                                No data is transfered. All data remains in your browser.\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <Tooltip title=\"Visit GitHub Repo\">\n                                <IconButton aria-label=\"visit github repo\"\n                                    color=\"inherit\"\n                                    className={classes.button}\n                                    onClick={handleNavigateToGitHub}>\n                                    <GitHubIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n                        <Grid item xs={1}>\n                            <Typography variant=\"caption\" align=\"center\" gutterBottom>\n                                v{packageJson.version}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Typography variant=\"caption\" align=\"center\" gutterBottom>\n                                GNU General Public License\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n        </div >\n    );\n}\n\nexport default App;","/Users/zcranfill/Test/video-keypress/src/components/Chart.js",["27"],"/Users/zcranfill/Test/video-keypress/src/hooks/keybindMap.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":27,"nodeType":"34","messageId":"35","endLine":1,"endColumn":36},{"ruleId":"32","severity":1,"message":"36","line":8,"column":8,"nodeType":"34","messageId":"35","endLine":8,"endColumn":20},{"ruleId":"32","severity":1,"message":"37","line":10,"column":8,"nodeType":"34","messageId":"35","endLine":10,"endColumn":21},{"ruleId":"32","severity":1,"message":"38","line":20,"column":8,"nodeType":"34","messageId":"35","endLine":20,"endColumn":18},{"ruleId":"32","severity":1,"message":"39","line":21,"column":8,"nodeType":"34","messageId":"35","endLine":21,"endColumn":18},{"ruleId":"40","severity":1,"message":"41","line":155,"column":5,"nodeType":"34","endLine":155,"endColumn":14,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ListItemIcon' is defined but never used.","'AddCircleIcon' is defined but never used.","'FolderIcon' is defined but never used.","'DeleteIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setFormattedData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.state.dataFileName, props.state.data.events, props.state.data.metadata.duration, props.state.isVideo, props.state.keybinds, formattedData.length, cachedNumHeaderRows, formatEvent] as a second argument to the useEffect Hook.",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Add dependencies array: [props.state.dataFileName, props.state.data.events, props.state.data.metadata.duration, props.state.isVideo, props.state.keybinds, formattedData.length, cachedNumHeaderRows, formatEvent]",{"range":"48","text":"49"},[9323,9323],", [props.state.dataFileName, props.state.data.events, props.state.data.metadata.duration, props.state.isVideo, props.state.keybinds, formattedData.length, cachedNumHeaderRows, formatEvent]"]