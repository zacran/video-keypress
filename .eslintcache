[{"/Users/zcranfill/Test/video-keypress/src/index.js":"1","/Users/zcranfill/Test/video-keypress/src/App.js":"2","/Users/zcranfill/Test/video-keypress/src/components/Chart.js":"3","/Users/zcranfill/Test/video-keypress/src/hooks/keybindMap.js":"4"},{"size":145,"mtime":1610635256431,"results":"5","hashOfConfig":"6"},{"size":20232,"mtime":1610675046718,"results":"7","hashOfConfig":"6"},{"size":9502,"mtime":1610670431670,"results":"8","hashOfConfig":"6"},{"size":428,"mtime":1610674713046,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5od0xb",{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zcranfill/Test/video-keypress/src/index.js",[],["20","21"],"/Users/zcranfill/Test/video-keypress/src/App.js",["22","23","24","25","26","27"],"/Users/zcranfill/Test/video-keypress/src/components/Chart.js",["28"],"import React, { useState, useEffect } from \"react\";\nimport { Chart as GoogleChart } from \"react-google-charts\";\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"../App.css\";\n\nconst COMPUTE_DERIVED_FIELDS_INTERVAL = 500;\nconst MIN_EVENT_DURATION = 0.1;\n\nfunction convertToMilliseconds(value) {\n    return value * 1000\n}\n\nfunction formatTime(value) {\n    return `${value.toFixed(2)}ms`;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        margin: 'auto',\n        maxWidth: '600px'\n    },\n    paper: {\n        padding: theme.spacing(1),\n        fontSize: '12px',\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nconst Chart = (props) => {\n    const [formattedData, setFormattedData] = useState([]);\n    const [derivedFields, setDerivedFields] = useState([]);\n    const [cachedFormattedDataSize, setCachedFormattedDataSize] = useState(0);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (formattedData.length !== cachedFormattedDataSize) {\n                setCachedFormattedDataSize(formattedData.length);\n                computeDerivedFields();\n            }\n        }, COMPUTE_DERIVED_FIELDS_INTERVAL);\n        return () => clearInterval(interval);\n    });\n\n    function computeDerivedFields() {\n        // Remove header row of formatted data\n        var data = formattedData.filter(obj => typeof obj[0] === 'string' && obj[1] !== 'Meta');\n        console.log(formattedData);\n        // Find unqiue behaviors in existing data\n        const uniqueBehaviors = [];\n        data.forEach(event => {\n            if (uniqueBehaviors.indexOf(event[0]) === -1) {\n                uniqueBehaviors.push(event[0])\n            }\n        });\n\n        var tempDerivedFields = [];\n\n        // Derive fields for each unique behavior\n        uniqueBehaviors.forEach(behavior => {\n            var occurences = 0, totalDuration = 0;\n            var matchingEvents = data.filter(event => event[0] === behavior);\n\n            console.log(\"finding derived fields for \" + behavior + \" found \" + matchingEvents.length + \" events\");\n\n            occurences = matchingEvents.length;\n            matchingEvents.forEach(event => {\n                totalDuration += (event[3] - event[2]);\n            });\n\n            var derivedField = {\n                behavior: behavior,\n                occurences: occurences,\n                totalDuration: totalDuration,\n                avgDuration: (totalDuration / occurences)\n            }\n\n            tempDerivedFields.push(derivedField);\n        });\n\n        setDerivedFields((derivedFields) => {\n            derivedFields = tempDerivedFields;\n            console.log(derivedFields);\n\n            return derivedFields;\n        });\n\n        props.state.derivedFields = derivedFields;\n    };\n\n    useEffect(() => {\n        var isVideoLoaded = (props.state.videoFilePath !== '');\n        var areEventsEmpty = (formattedData.length === 0 && props.state.data.events && props.state.data.events.length === 0);\n\n        // Video has been cleared, reset the chart\n        if (!isVideoLoaded && formattedData.length !== 0) {\n            setFormattedData([]);\n            setDerivedFields([]);\n        }\n\n        if (isVideoLoaded && areEventsEmpty) {\n            var headerRows = [\n                [\n                    { type: 'string', id: 'Behavior' },\n                    { type: 'string', id: 'Event' },\n                    { type: 'number', id: 'Start' },\n                    { type: 'number', id: 'End' },\n                ],\n                [\n                    \"Behavior\", \"Meta\", 0, convertToMilliseconds(props.state.data.metadata.duration)\n                ]\n            ];\n            setFormattedData(headerRows);\n        }\n\n        // Check if events exist to avoid running code when idle\n        var eventsExist = (props.state.data.events && props.state.data.events.length > 0);\n        // Check if a new event exists -- length of data.events plus 2 base header rows\n        var newEventExists = (props.state.data.events.length + 2 > formattedData.length);\n\n        // Add new event and compute derived fields when new record is persisted\n        if (eventsExist && newEventExists) {\n            // Get latest row\n            var latestEvent = props.state.data.events[props.state.data.events.length - 1];\n\n            // for display purposes, set a minimum value for durations\n            if ((latestEvent.end - latestEvent.start) < MIN_EVENT_DURATION) latestEvent.end += MIN_EVENT_DURATION;\n\n            // Seach existing records for similar start, end, duration times and adjust by the MIN_EVENT_DURATION\n            // This is to account for key presses that happen faster than the update cycle of React\n            props.state.data.events.forEach(obj => {\n                if (obj.id !== latestEvent.id) {\n                    if (obj.start === latestEvent.start) {\n                        console.warn(\"Adjusted event start time due to existing similar events: \" + latestEvent.id);\n                        latestEvent.start += (MIN_EVENT_DURATION + (0.1 * MIN_EVENT_DURATION));\n                    }\n\n                    if (obj.behavior === latestEvent.behavior && obj.end === latestEvent.start) {\n                        console.warn(\"Adjusted event start time due to existing similar events: \" + latestEvent.id);\n                        latestEvent.start += (0.1 * MIN_EVENT_DURATION);\n                    }\n\n                    if (obj.end === latestEvent.end) {\n                        console.warn(\"Adjusted event end time due to existing similar events: \" + latestEvent.id);\n                        latestEvent.end += (MIN_EVENT_DURATION + (0.1 * MIN_EVENT_DURATION));\n                    }\n                }\n            });\n\n            var formattedEvent = [\n                latestEvent.behavior,\n                \"Event: #\" + latestEvent.id,\n                convertToMilliseconds(latestEvent.start),\n                convertToMilliseconds(latestEvent.end)\n            ];\n            setFormattedData(formattedData => [...formattedData, formattedEvent]);\n        }\n    });\n\n    return (\n        <div className=\"Row\">\n            {derivedFields.length > 0 ?\n                derivedFields.map((derivedField) =>\n                    <Grid container className={classes.root} spacing={2} key={derivedField.behavior}>\n                        <Grid item xs={3}>\n                            <Paper className={classes.paper}>\n                                <Typography variant=\"caption\" display=\"inline\" gutterBottom>    Behavior:   </Typography>\n                                <Typography variant=\"subtitle2\" display=\"block\" align=\"center\" gutterBottom >{derivedField.behavior}</Typography>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Paper className={classes.paper}>\n                                <Typography variant=\"caption\" display=\"inline\" gutterBottom>    Occurences: </Typography>\n                                <Typography variant=\"subtitle2\" display=\"block\" align=\"center\" gutterBottom >{derivedField.occurences}</Typography>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Paper className={classes.paper}>\n                                <Typography variant=\"caption\" display=\"inline\" gutterBottom>    Avg Duration:   </Typography>\n                                <Typography variant=\"subtitle2\" display=\"block\" align=\"center\" gutterBottom >{formatTime(derivedField.avgDuration)}</Typography>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Paper className={classes.paper}>\n                                <Typography variant=\"caption\" display=\"inline\" gutterBottom>    Total Duration:    </Typography>\n                                <Typography variant=\"subtitle2\" display=\"block\" align=\"center\" gutterBottom >{formatTime(derivedField.totalDuration)}</Typography>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                )\n                : \"\"}\n            <div id=\"chart-container\" className=\"GoogleChart\">\n                {\n                    formattedData.length > 1 ?\n                        <GoogleChart\n\n                            width={'840px'}\n                            height={'100%'}\n                            chartType=\"Timeline\"\n                            data={formattedData}\n                            options={{\n                                timeline: {\n                                    colorByRowLabel: true,\n                                    margin: 'auto',\n                                    showBarLabels: false,\n                                },\n                                colors: ['transparent', '#469FAE', '#3ECDB6', '#F7D9A6', '#F67E5C', '#CA1252', '#DD5B5C', '#D9959A', '#938D99', '#5E614A'],\n                            }}\n                            rootProps={{ 'data-testid': '6' }}\n                        />\n                        : \"\"\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Chart;","/Users/zcranfill/Test/video-keypress/src/hooks/keybindMap.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":27,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"33","severity":1,"message":"37","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":20},{"ruleId":"33","severity":1,"message":"38","line":9,"column":8,"nodeType":"35","messageId":"36","endLine":9,"endColumn":21},{"ruleId":"33","severity":1,"message":"39","line":18,"column":8,"nodeType":"35","messageId":"36","endLine":18,"endColumn":18},{"ruleId":"33","severity":1,"message":"40","line":19,"column":8,"nodeType":"35","messageId":"36","endLine":19,"endColumn":18},{"ruleId":"33","severity":1,"message":"41","line":333,"column":11,"nodeType":"35","messageId":"36","endLine":333,"endColumn":22},{"ruleId":"42","severity":1,"message":"43","line":100,"column":5,"nodeType":"35","endLine":100,"endColumn":14,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'ListItemIcon' is defined but never used.","'AddCircleIcon' is defined but never used.","'FolderIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'keybindMenu' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setFormattedData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.state.videoFilePath, props.state.data.events, props.state.data.metadata.duration, formattedData.length] as a second argument to the useEffect Hook.",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},"Add dependencies array: [props.state.videoFilePath, props.state.data.events, props.state.data.metadata.duration, formattedData.length]",{"range":"50","text":"51"},[6352,6352],", [props.state.videoFilePath, props.state.data.events, props.state.data.metadata.duration, formattedData.length]"]